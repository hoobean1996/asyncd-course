// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"fs.io/asyncd/ent/enttaskhandler"
)

// EntTaskHandlerCreate is the builder for creating a EntTaskHandler entity.
type EntTaskHandlerCreate struct {
	config
	mutation *EntTaskHandlerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ethc *EntTaskHandlerCreate) SetName(s string) *EntTaskHandlerCreate {
	ethc.mutation.SetName(s)
	return ethc
}

// SetSignature sets the "signature" field.
func (ethc *EntTaskHandlerCreate) SetSignature(s string) *EntTaskHandlerCreate {
	ethc.mutation.SetSignature(s)
	return ethc
}

// SetCreatedAt sets the "created_at" field.
func (ethc *EntTaskHandlerCreate) SetCreatedAt(t time.Time) *EntTaskHandlerCreate {
	ethc.mutation.SetCreatedAt(t)
	return ethc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ethc *EntTaskHandlerCreate) SetNillableCreatedAt(t *time.Time) *EntTaskHandlerCreate {
	if t != nil {
		ethc.SetCreatedAt(*t)
	}
	return ethc
}

// SetUpdatedAt sets the "updated_at" field.
func (ethc *EntTaskHandlerCreate) SetUpdatedAt(t time.Time) *EntTaskHandlerCreate {
	ethc.mutation.SetUpdatedAt(t)
	return ethc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ethc *EntTaskHandlerCreate) SetNillableUpdatedAt(t *time.Time) *EntTaskHandlerCreate {
	if t != nil {
		ethc.SetUpdatedAt(*t)
	}
	return ethc
}

// Mutation returns the EntTaskHandlerMutation object of the builder.
func (ethc *EntTaskHandlerCreate) Mutation() *EntTaskHandlerMutation {
	return ethc.mutation
}

// Save creates the EntTaskHandler in the database.
func (ethc *EntTaskHandlerCreate) Save(ctx context.Context) (*EntTaskHandler, error) {
	ethc.defaults()
	return withHooks(ctx, ethc.sqlSave, ethc.mutation, ethc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ethc *EntTaskHandlerCreate) SaveX(ctx context.Context) *EntTaskHandler {
	v, err := ethc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ethc *EntTaskHandlerCreate) Exec(ctx context.Context) error {
	_, err := ethc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethc *EntTaskHandlerCreate) ExecX(ctx context.Context) {
	if err := ethc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ethc *EntTaskHandlerCreate) defaults() {
	if _, ok := ethc.mutation.CreatedAt(); !ok {
		v := enttaskhandler.DefaultCreatedAt()
		ethc.mutation.SetCreatedAt(v)
	}
	if _, ok := ethc.mutation.UpdatedAt(); !ok {
		v := enttaskhandler.DefaultUpdatedAt()
		ethc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ethc *EntTaskHandlerCreate) check() error {
	if _, ok := ethc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EntTaskHandler.name"`)}
	}
	if _, ok := ethc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "EntTaskHandler.signature"`)}
	}
	if _, ok := ethc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntTaskHandler.created_at"`)}
	}
	if _, ok := ethc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntTaskHandler.updated_at"`)}
	}
	return nil
}

func (ethc *EntTaskHandlerCreate) sqlSave(ctx context.Context) (*EntTaskHandler, error) {
	if err := ethc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ethc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ethc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ethc.mutation.id = &_node.ID
	ethc.mutation.done = true
	return _node, nil
}

func (ethc *EntTaskHandlerCreate) createSpec() (*EntTaskHandler, *sqlgraph.CreateSpec) {
	var (
		_node = &EntTaskHandler{config: ethc.config}
		_spec = sqlgraph.NewCreateSpec(enttaskhandler.Table, sqlgraph.NewFieldSpec(enttaskhandler.FieldID, field.TypeInt))
	)
	if value, ok := ethc.mutation.Name(); ok {
		_spec.SetField(enttaskhandler.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ethc.mutation.Signature(); ok {
		_spec.SetField(enttaskhandler.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := ethc.mutation.CreatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ethc.mutation.UpdatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// EntTaskHandlerCreateBulk is the builder for creating many EntTaskHandler entities in bulk.
type EntTaskHandlerCreateBulk struct {
	config
	err      error
	builders []*EntTaskHandlerCreate
}

// Save creates the EntTaskHandler entities in the database.
func (ethcb *EntTaskHandlerCreateBulk) Save(ctx context.Context) ([]*EntTaskHandler, error) {
	if ethcb.err != nil {
		return nil, ethcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ethcb.builders))
	nodes := make([]*EntTaskHandler, len(ethcb.builders))
	mutators := make([]Mutator, len(ethcb.builders))
	for i := range ethcb.builders {
		func(i int, root context.Context) {
			builder := ethcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntTaskHandlerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ethcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ethcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ethcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ethcb *EntTaskHandlerCreateBulk) SaveX(ctx context.Context) []*EntTaskHandler {
	v, err := ethcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ethcb *EntTaskHandlerCreateBulk) Exec(ctx context.Context) error {
	_, err := ethcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethcb *EntTaskHandlerCreateBulk) ExecX(ctx context.Context) {
	if err := ethcb.Exec(ctx); err != nil {
		panic(err)
	}
}
