// Code generated by ent, DO NOT EDIT.

package enttask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"fs.io/asyncd/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldID, id))
}

// Handler applies equality check predicate on the "handler" field. It's identical to HandlerEQ.
func Handler(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldHandler, v))
}

// Parameter applies equality check predicate on the "parameter" field. It's identical to ParameterEQ.
func Parameter(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldParameter, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldPriority, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// HandlerEQ applies the EQ predicate on the "handler" field.
func HandlerEQ(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldHandler, v))
}

// HandlerNEQ applies the NEQ predicate on the "handler" field.
func HandlerNEQ(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldHandler, v))
}

// HandlerIn applies the In predicate on the "handler" field.
func HandlerIn(vs ...string) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldHandler, vs...))
}

// HandlerNotIn applies the NotIn predicate on the "handler" field.
func HandlerNotIn(vs ...string) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldHandler, vs...))
}

// HandlerGT applies the GT predicate on the "handler" field.
func HandlerGT(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldHandler, v))
}

// HandlerGTE applies the GTE predicate on the "handler" field.
func HandlerGTE(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldHandler, v))
}

// HandlerLT applies the LT predicate on the "handler" field.
func HandlerLT(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldHandler, v))
}

// HandlerLTE applies the LTE predicate on the "handler" field.
func HandlerLTE(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldHandler, v))
}

// HandlerContains applies the Contains predicate on the "handler" field.
func HandlerContains(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldContains(FieldHandler, v))
}

// HandlerHasPrefix applies the HasPrefix predicate on the "handler" field.
func HandlerHasPrefix(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldHasPrefix(FieldHandler, v))
}

// HandlerHasSuffix applies the HasSuffix predicate on the "handler" field.
func HandlerHasSuffix(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldHasSuffix(FieldHandler, v))
}

// HandlerEqualFold applies the EqualFold predicate on the "handler" field.
func HandlerEqualFold(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEqualFold(FieldHandler, v))
}

// HandlerContainsFold applies the ContainsFold predicate on the "handler" field.
func HandlerContainsFold(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldContainsFold(FieldHandler, v))
}

// ParameterEQ applies the EQ predicate on the "parameter" field.
func ParameterEQ(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldParameter, v))
}

// ParameterNEQ applies the NEQ predicate on the "parameter" field.
func ParameterNEQ(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldParameter, v))
}

// ParameterIn applies the In predicate on the "parameter" field.
func ParameterIn(vs ...string) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldParameter, vs...))
}

// ParameterNotIn applies the NotIn predicate on the "parameter" field.
func ParameterNotIn(vs ...string) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldParameter, vs...))
}

// ParameterGT applies the GT predicate on the "parameter" field.
func ParameterGT(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldParameter, v))
}

// ParameterGTE applies the GTE predicate on the "parameter" field.
func ParameterGTE(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldParameter, v))
}

// ParameterLT applies the LT predicate on the "parameter" field.
func ParameterLT(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldParameter, v))
}

// ParameterLTE applies the LTE predicate on the "parameter" field.
func ParameterLTE(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldParameter, v))
}

// ParameterContains applies the Contains predicate on the "parameter" field.
func ParameterContains(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldContains(FieldParameter, v))
}

// ParameterHasPrefix applies the HasPrefix predicate on the "parameter" field.
func ParameterHasPrefix(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldHasPrefix(FieldParameter, v))
}

// ParameterHasSuffix applies the HasSuffix predicate on the "parameter" field.
func ParameterHasSuffix(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldHasSuffix(FieldParameter, v))
}

// ParameterEqualFold applies the EqualFold predicate on the "parameter" field.
func ParameterEqualFold(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldEqualFold(FieldParameter, v))
}

// ParameterContainsFold applies the ContainsFold predicate on the "parameter" field.
func ParameterContainsFold(v string) predicate.EntTask {
	return predicate.EntTask(sql.FieldContainsFold(FieldParameter, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldPriority, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EntTask {
	return predicate.EntTask(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntTask) predicate.EntTask {
	return predicate.EntTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntTask) predicate.EntTask {
	return predicate.EntTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntTask) predicate.EntTask {
	return predicate.EntTask(sql.NotPredicates(p))
}
