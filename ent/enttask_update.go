// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"fs.io/asyncd/ent/enttask"
	"fs.io/asyncd/ent/predicate"
)

// EntTaskUpdate is the builder for updating EntTask entities.
type EntTaskUpdate struct {
	config
	hooks    []Hook
	mutation *EntTaskMutation
}

// Where appends a list predicates to the EntTaskUpdate builder.
func (etu *EntTaskUpdate) Where(ps ...predicate.EntTask) *EntTaskUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetHandler sets the "handler" field.
func (etu *EntTaskUpdate) SetHandler(s string) *EntTaskUpdate {
	etu.mutation.SetHandler(s)
	return etu
}

// SetNillableHandler sets the "handler" field if the given value is not nil.
func (etu *EntTaskUpdate) SetNillableHandler(s *string) *EntTaskUpdate {
	if s != nil {
		etu.SetHandler(*s)
	}
	return etu
}

// SetParameter sets the "parameter" field.
func (etu *EntTaskUpdate) SetParameter(s string) *EntTaskUpdate {
	etu.mutation.SetParameter(s)
	return etu
}

// SetNillableParameter sets the "parameter" field if the given value is not nil.
func (etu *EntTaskUpdate) SetNillableParameter(s *string) *EntTaskUpdate {
	if s != nil {
		etu.SetParameter(*s)
	}
	return etu
}

// SetPriority sets the "priority" field.
func (etu *EntTaskUpdate) SetPriority(i int) *EntTaskUpdate {
	etu.mutation.ResetPriority()
	etu.mutation.SetPriority(i)
	return etu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (etu *EntTaskUpdate) SetNillablePriority(i *int) *EntTaskUpdate {
	if i != nil {
		etu.SetPriority(*i)
	}
	return etu
}

// AddPriority adds i to the "priority" field.
func (etu *EntTaskUpdate) AddPriority(i int) *EntTaskUpdate {
	etu.mutation.AddPriority(i)
	return etu
}

// SetCreatedAt sets the "created_at" field.
func (etu *EntTaskUpdate) SetCreatedAt(t time.Time) *EntTaskUpdate {
	etu.mutation.SetCreatedAt(t)
	return etu
}

// SetUpdatedAt sets the "updated_at" field.
func (etu *EntTaskUpdate) SetUpdatedAt(t time.Time) *EntTaskUpdate {
	etu.mutation.SetUpdatedAt(t)
	return etu
}

// Mutation returns the EntTaskMutation object of the builder.
func (etu *EntTaskUpdate) Mutation() *EntTaskMutation {
	return etu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EntTaskUpdate) Save(ctx context.Context) (int, error) {
	etu.defaults()
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EntTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EntTaskUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EntTaskUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etu *EntTaskUpdate) defaults() {
	if _, ok := etu.mutation.CreatedAt(); !ok {
		v := enttask.UpdateDefaultCreatedAt()
		etu.mutation.SetCreatedAt(v)
	}
	if _, ok := etu.mutation.UpdatedAt(); !ok {
		v := enttask.UpdateDefaultUpdatedAt()
		etu.mutation.SetUpdatedAt(v)
	}
}

func (etu *EntTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttask.Table, enttask.Columns, sqlgraph.NewFieldSpec(enttask.FieldID, field.TypeInt))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Handler(); ok {
		_spec.SetField(enttask.FieldHandler, field.TypeString, value)
	}
	if value, ok := etu.mutation.Parameter(); ok {
		_spec.SetField(enttask.FieldParameter, field.TypeString, value)
	}
	if value, ok := etu.mutation.Priority(); ok {
		_spec.SetField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := etu.mutation.AddedPriority(); ok {
		_spec.AddField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := etu.mutation.CreatedAt(); ok {
		_spec.SetField(enttask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := etu.mutation.UpdatedAt(); ok {
		_spec.SetField(enttask.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EntTaskUpdateOne is the builder for updating a single EntTask entity.
type EntTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntTaskMutation
}

// SetHandler sets the "handler" field.
func (etuo *EntTaskUpdateOne) SetHandler(s string) *EntTaskUpdateOne {
	etuo.mutation.SetHandler(s)
	return etuo
}

// SetNillableHandler sets the "handler" field if the given value is not nil.
func (etuo *EntTaskUpdateOne) SetNillableHandler(s *string) *EntTaskUpdateOne {
	if s != nil {
		etuo.SetHandler(*s)
	}
	return etuo
}

// SetParameter sets the "parameter" field.
func (etuo *EntTaskUpdateOne) SetParameter(s string) *EntTaskUpdateOne {
	etuo.mutation.SetParameter(s)
	return etuo
}

// SetNillableParameter sets the "parameter" field if the given value is not nil.
func (etuo *EntTaskUpdateOne) SetNillableParameter(s *string) *EntTaskUpdateOne {
	if s != nil {
		etuo.SetParameter(*s)
	}
	return etuo
}

// SetPriority sets the "priority" field.
func (etuo *EntTaskUpdateOne) SetPriority(i int) *EntTaskUpdateOne {
	etuo.mutation.ResetPriority()
	etuo.mutation.SetPriority(i)
	return etuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (etuo *EntTaskUpdateOne) SetNillablePriority(i *int) *EntTaskUpdateOne {
	if i != nil {
		etuo.SetPriority(*i)
	}
	return etuo
}

// AddPriority adds i to the "priority" field.
func (etuo *EntTaskUpdateOne) AddPriority(i int) *EntTaskUpdateOne {
	etuo.mutation.AddPriority(i)
	return etuo
}

// SetCreatedAt sets the "created_at" field.
func (etuo *EntTaskUpdateOne) SetCreatedAt(t time.Time) *EntTaskUpdateOne {
	etuo.mutation.SetCreatedAt(t)
	return etuo
}

// SetUpdatedAt sets the "updated_at" field.
func (etuo *EntTaskUpdateOne) SetUpdatedAt(t time.Time) *EntTaskUpdateOne {
	etuo.mutation.SetUpdatedAt(t)
	return etuo
}

// Mutation returns the EntTaskMutation object of the builder.
func (etuo *EntTaskUpdateOne) Mutation() *EntTaskMutation {
	return etuo.mutation
}

// Where appends a list predicates to the EntTaskUpdate builder.
func (etuo *EntTaskUpdateOne) Where(ps ...predicate.EntTask) *EntTaskUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EntTaskUpdateOne) Select(field string, fields ...string) *EntTaskUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EntTask entity.
func (etuo *EntTaskUpdateOne) Save(ctx context.Context) (*EntTask, error) {
	etuo.defaults()
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EntTaskUpdateOne) SaveX(ctx context.Context) *EntTask {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EntTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EntTaskUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etuo *EntTaskUpdateOne) defaults() {
	if _, ok := etuo.mutation.CreatedAt(); !ok {
		v := enttask.UpdateDefaultCreatedAt()
		etuo.mutation.SetCreatedAt(v)
	}
	if _, ok := etuo.mutation.UpdatedAt(); !ok {
		v := enttask.UpdateDefaultUpdatedAt()
		etuo.mutation.SetUpdatedAt(v)
	}
}

func (etuo *EntTaskUpdateOne) sqlSave(ctx context.Context) (_node *EntTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttask.Table, enttask.Columns, sqlgraph.NewFieldSpec(enttask.FieldID, field.TypeInt))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttask.FieldID)
		for _, f := range fields {
			if !enttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.Handler(); ok {
		_spec.SetField(enttask.FieldHandler, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Parameter(); ok {
		_spec.SetField(enttask.FieldParameter, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Priority(); ok {
		_spec.SetField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := etuo.mutation.AddedPriority(); ok {
		_spec.AddField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := etuo.mutation.CreatedAt(); ok {
		_spec.SetField(enttask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := etuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enttask.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &EntTask{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
