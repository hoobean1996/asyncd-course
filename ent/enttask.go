// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"fs.io/asyncd/ent/enttask"
)

// EntTask is the model entity for the EntTask schema.
type EntTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// This is the handler of the task
	Handler string `json:"handler,omitempty"`
	// This is JSON input of the task
	Parameter string `json:"parameter,omitempty"`
	// This is the priority of the task
	Priority int `json:"priority,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enttask.FieldID, enttask.FieldPriority:
			values[i] = new(sql.NullInt64)
		case enttask.FieldHandler, enttask.FieldParameter:
			values[i] = new(sql.NullString)
		case enttask.FieldCreatedAt, enttask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntTask fields.
func (et *EntTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enttask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			et.ID = int(value.Int64)
		case enttask.FieldHandler:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler", values[i])
			} else if value.Valid {
				et.Handler = value.String
			}
		case enttask.FieldParameter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parameter", values[i])
			} else if value.Valid {
				et.Parameter = value.String
			}
		case enttask.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				et.Priority = int(value.Int64)
			}
		case enttask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case enttask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntTask.
// This includes values selected through modifiers, order, etc.
func (et *EntTask) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// Update returns a builder for updating this EntTask.
// Note that you need to call EntTask.Unwrap() before calling this method if this EntTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EntTask) Update() *EntTaskUpdateOne {
	return NewEntTaskClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EntTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EntTask) Unwrap() *EntTask {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntTask is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EntTask) String() string {
	var builder strings.Builder
	builder.WriteString("EntTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("handler=")
	builder.WriteString(et.Handler)
	builder.WriteString(", ")
	builder.WriteString("parameter=")
	builder.WriteString(et.Parameter)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", et.Priority))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EntTasks is a parsable slice of EntTask.
type EntTasks []*EntTask
