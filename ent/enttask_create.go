// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"fs.io/asyncd/ent/enttask"
)

// EntTaskCreate is the builder for creating a EntTask entity.
type EntTaskCreate struct {
	config
	mutation *EntTaskMutation
	hooks    []Hook
}

// SetHandler sets the "handler" field.
func (etc *EntTaskCreate) SetHandler(s string) *EntTaskCreate {
	etc.mutation.SetHandler(s)
	return etc
}

// SetParameter sets the "parameter" field.
func (etc *EntTaskCreate) SetParameter(s string) *EntTaskCreate {
	etc.mutation.SetParameter(s)
	return etc
}

// SetPriority sets the "priority" field.
func (etc *EntTaskCreate) SetPriority(i int) *EntTaskCreate {
	etc.mutation.SetPriority(i)
	return etc
}

// Mutation returns the EntTaskMutation object of the builder.
func (etc *EntTaskCreate) Mutation() *EntTaskMutation {
	return etc.mutation
}

// Save creates the EntTask in the database.
func (etc *EntTaskCreate) Save(ctx context.Context) (*EntTask, error) {
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EntTaskCreate) SaveX(ctx context.Context) *EntTask {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EntTaskCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EntTaskCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EntTaskCreate) check() error {
	if _, ok := etc.mutation.Handler(); !ok {
		return &ValidationError{Name: "handler", err: errors.New(`ent: missing required field "EntTask.handler"`)}
	}
	if _, ok := etc.mutation.Parameter(); !ok {
		return &ValidationError{Name: "parameter", err: errors.New(`ent: missing required field "EntTask.parameter"`)}
	}
	if _, ok := etc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "EntTask.priority"`)}
	}
	return nil
}

func (etc *EntTaskCreate) sqlSave(ctx context.Context) (*EntTask, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EntTaskCreate) createSpec() (*EntTask, *sqlgraph.CreateSpec) {
	var (
		_node = &EntTask{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(enttask.Table, sqlgraph.NewFieldSpec(enttask.FieldID, field.TypeInt))
	)
	if value, ok := etc.mutation.Handler(); ok {
		_spec.SetField(enttask.FieldHandler, field.TypeString, value)
		_node.Handler = value
	}
	if value, ok := etc.mutation.Parameter(); ok {
		_spec.SetField(enttask.FieldParameter, field.TypeString, value)
		_node.Parameter = value
	}
	if value, ok := etc.mutation.Priority(); ok {
		_spec.SetField(enttask.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	return _node, _spec
}

// EntTaskCreateBulk is the builder for creating many EntTask entities in bulk.
type EntTaskCreateBulk struct {
	config
	err      error
	builders []*EntTaskCreate
}

// Save creates the EntTask entities in the database.
func (etcb *EntTaskCreateBulk) Save(ctx context.Context) ([]*EntTask, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EntTask, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EntTaskCreateBulk) SaveX(ctx context.Context) []*EntTask {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EntTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EntTaskCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
