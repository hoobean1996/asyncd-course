// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"fs.io/asyncd/ent/enttaskhandler"
	"fs.io/asyncd/ent/predicate"
)

// EntTaskHandlerUpdate is the builder for updating EntTaskHandler entities.
type EntTaskHandlerUpdate struct {
	config
	hooks    []Hook
	mutation *EntTaskHandlerMutation
}

// Where appends a list predicates to the EntTaskHandlerUpdate builder.
func (ethu *EntTaskHandlerUpdate) Where(ps ...predicate.EntTaskHandler) *EntTaskHandlerUpdate {
	ethu.mutation.Where(ps...)
	return ethu
}

// SetName sets the "name" field.
func (ethu *EntTaskHandlerUpdate) SetName(s string) *EntTaskHandlerUpdate {
	ethu.mutation.SetName(s)
	return ethu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ethu *EntTaskHandlerUpdate) SetNillableName(s *string) *EntTaskHandlerUpdate {
	if s != nil {
		ethu.SetName(*s)
	}
	return ethu
}

// SetSignature sets the "signature" field.
func (ethu *EntTaskHandlerUpdate) SetSignature(s string) *EntTaskHandlerUpdate {
	ethu.mutation.SetSignature(s)
	return ethu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (ethu *EntTaskHandlerUpdate) SetNillableSignature(s *string) *EntTaskHandlerUpdate {
	if s != nil {
		ethu.SetSignature(*s)
	}
	return ethu
}

// SetCreatedAt sets the "created_at" field.
func (ethu *EntTaskHandlerUpdate) SetCreatedAt(t time.Time) *EntTaskHandlerUpdate {
	ethu.mutation.SetCreatedAt(t)
	return ethu
}

// SetUpdatedAt sets the "updated_at" field.
func (ethu *EntTaskHandlerUpdate) SetUpdatedAt(t time.Time) *EntTaskHandlerUpdate {
	ethu.mutation.SetUpdatedAt(t)
	return ethu
}

// Mutation returns the EntTaskHandlerMutation object of the builder.
func (ethu *EntTaskHandlerUpdate) Mutation() *EntTaskHandlerMutation {
	return ethu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ethu *EntTaskHandlerUpdate) Save(ctx context.Context) (int, error) {
	ethu.defaults()
	return withHooks(ctx, ethu.sqlSave, ethu.mutation, ethu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ethu *EntTaskHandlerUpdate) SaveX(ctx context.Context) int {
	affected, err := ethu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ethu *EntTaskHandlerUpdate) Exec(ctx context.Context) error {
	_, err := ethu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethu *EntTaskHandlerUpdate) ExecX(ctx context.Context) {
	if err := ethu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ethu *EntTaskHandlerUpdate) defaults() {
	if _, ok := ethu.mutation.CreatedAt(); !ok {
		v := enttaskhandler.UpdateDefaultCreatedAt()
		ethu.mutation.SetCreatedAt(v)
	}
	if _, ok := ethu.mutation.UpdatedAt(); !ok {
		v := enttaskhandler.UpdateDefaultUpdatedAt()
		ethu.mutation.SetUpdatedAt(v)
	}
}

func (ethu *EntTaskHandlerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttaskhandler.Table, enttaskhandler.Columns, sqlgraph.NewFieldSpec(enttaskhandler.FieldID, field.TypeInt))
	if ps := ethu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ethu.mutation.Name(); ok {
		_spec.SetField(enttaskhandler.FieldName, field.TypeString, value)
	}
	if value, ok := ethu.mutation.Signature(); ok {
		_spec.SetField(enttaskhandler.FieldSignature, field.TypeString, value)
	}
	if value, ok := ethu.mutation.CreatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ethu.mutation.UpdatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ethu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttaskhandler.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ethu.mutation.done = true
	return n, nil
}

// EntTaskHandlerUpdateOne is the builder for updating a single EntTaskHandler entity.
type EntTaskHandlerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntTaskHandlerMutation
}

// SetName sets the "name" field.
func (ethuo *EntTaskHandlerUpdateOne) SetName(s string) *EntTaskHandlerUpdateOne {
	ethuo.mutation.SetName(s)
	return ethuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ethuo *EntTaskHandlerUpdateOne) SetNillableName(s *string) *EntTaskHandlerUpdateOne {
	if s != nil {
		ethuo.SetName(*s)
	}
	return ethuo
}

// SetSignature sets the "signature" field.
func (ethuo *EntTaskHandlerUpdateOne) SetSignature(s string) *EntTaskHandlerUpdateOne {
	ethuo.mutation.SetSignature(s)
	return ethuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (ethuo *EntTaskHandlerUpdateOne) SetNillableSignature(s *string) *EntTaskHandlerUpdateOne {
	if s != nil {
		ethuo.SetSignature(*s)
	}
	return ethuo
}

// SetCreatedAt sets the "created_at" field.
func (ethuo *EntTaskHandlerUpdateOne) SetCreatedAt(t time.Time) *EntTaskHandlerUpdateOne {
	ethuo.mutation.SetCreatedAt(t)
	return ethuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ethuo *EntTaskHandlerUpdateOne) SetUpdatedAt(t time.Time) *EntTaskHandlerUpdateOne {
	ethuo.mutation.SetUpdatedAt(t)
	return ethuo
}

// Mutation returns the EntTaskHandlerMutation object of the builder.
func (ethuo *EntTaskHandlerUpdateOne) Mutation() *EntTaskHandlerMutation {
	return ethuo.mutation
}

// Where appends a list predicates to the EntTaskHandlerUpdate builder.
func (ethuo *EntTaskHandlerUpdateOne) Where(ps ...predicate.EntTaskHandler) *EntTaskHandlerUpdateOne {
	ethuo.mutation.Where(ps...)
	return ethuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ethuo *EntTaskHandlerUpdateOne) Select(field string, fields ...string) *EntTaskHandlerUpdateOne {
	ethuo.fields = append([]string{field}, fields...)
	return ethuo
}

// Save executes the query and returns the updated EntTaskHandler entity.
func (ethuo *EntTaskHandlerUpdateOne) Save(ctx context.Context) (*EntTaskHandler, error) {
	ethuo.defaults()
	return withHooks(ctx, ethuo.sqlSave, ethuo.mutation, ethuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ethuo *EntTaskHandlerUpdateOne) SaveX(ctx context.Context) *EntTaskHandler {
	node, err := ethuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ethuo *EntTaskHandlerUpdateOne) Exec(ctx context.Context) error {
	_, err := ethuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ethuo *EntTaskHandlerUpdateOne) ExecX(ctx context.Context) {
	if err := ethuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ethuo *EntTaskHandlerUpdateOne) defaults() {
	if _, ok := ethuo.mutation.CreatedAt(); !ok {
		v := enttaskhandler.UpdateDefaultCreatedAt()
		ethuo.mutation.SetCreatedAt(v)
	}
	if _, ok := ethuo.mutation.UpdatedAt(); !ok {
		v := enttaskhandler.UpdateDefaultUpdatedAt()
		ethuo.mutation.SetUpdatedAt(v)
	}
}

func (ethuo *EntTaskHandlerUpdateOne) sqlSave(ctx context.Context) (_node *EntTaskHandler, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttaskhandler.Table, enttaskhandler.Columns, sqlgraph.NewFieldSpec(enttaskhandler.FieldID, field.TypeInt))
	id, ok := ethuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntTaskHandler.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ethuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttaskhandler.FieldID)
		for _, f := range fields {
			if !enttaskhandler.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enttaskhandler.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ethuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ethuo.mutation.Name(); ok {
		_spec.SetField(enttaskhandler.FieldName, field.TypeString, value)
	}
	if value, ok := ethuo.mutation.Signature(); ok {
		_spec.SetField(enttaskhandler.FieldSignature, field.TypeString, value)
	}
	if value, ok := ethuo.mutation.CreatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ethuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enttaskhandler.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &EntTaskHandler{config: ethuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ethuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttaskhandler.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ethuo.mutation.done = true
	return _node, nil
}
