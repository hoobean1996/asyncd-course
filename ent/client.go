// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"fs.io/asyncd/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"fs.io/asyncd/ent/enttask"
	"fs.io/asyncd/ent/enttaskhandler"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EntTask is the client for interacting with the EntTask builders.
	EntTask *EntTaskClient
	// EntTaskHandler is the client for interacting with the EntTaskHandler builders.
	EntTaskHandler *EntTaskHandlerClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EntTask = NewEntTaskClient(c.config)
	c.EntTaskHandler = NewEntTaskHandlerClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		EntTask:        NewEntTaskClient(cfg),
		EntTaskHandler: NewEntTaskHandlerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		EntTask:        NewEntTaskClient(cfg),
		EntTaskHandler: NewEntTaskHandlerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EntTask.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EntTask.Use(hooks...)
	c.EntTaskHandler.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.EntTask.Intercept(interceptors...)
	c.EntTaskHandler.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EntTaskMutation:
		return c.EntTask.mutate(ctx, m)
	case *EntTaskHandlerMutation:
		return c.EntTaskHandler.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EntTaskClient is a client for the EntTask schema.
type EntTaskClient struct {
	config
}

// NewEntTaskClient returns a client for the EntTask from the given config.
func NewEntTaskClient(c config) *EntTaskClient {
	return &EntTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enttask.Hooks(f(g(h())))`.
func (c *EntTaskClient) Use(hooks ...Hook) {
	c.hooks.EntTask = append(c.hooks.EntTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enttask.Intercept(f(g(h())))`.
func (c *EntTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntTask = append(c.inters.EntTask, interceptors...)
}

// Create returns a builder for creating a EntTask entity.
func (c *EntTaskClient) Create() *EntTaskCreate {
	mutation := newEntTaskMutation(c.config, OpCreate)
	return &EntTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntTask entities.
func (c *EntTaskClient) CreateBulk(builders ...*EntTaskCreate) *EntTaskCreateBulk {
	return &EntTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntTaskClient) MapCreateBulk(slice any, setFunc func(*EntTaskCreate, int)) *EntTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntTaskCreateBulk{err: fmt.Errorf("calling to EntTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntTask.
func (c *EntTaskClient) Update() *EntTaskUpdate {
	mutation := newEntTaskMutation(c.config, OpUpdate)
	return &EntTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntTaskClient) UpdateOne(et *EntTask) *EntTaskUpdateOne {
	mutation := newEntTaskMutation(c.config, OpUpdateOne, withEntTask(et))
	return &EntTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntTaskClient) UpdateOneID(id int) *EntTaskUpdateOne {
	mutation := newEntTaskMutation(c.config, OpUpdateOne, withEntTaskID(id))
	return &EntTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntTask.
func (c *EntTaskClient) Delete() *EntTaskDelete {
	mutation := newEntTaskMutation(c.config, OpDelete)
	return &EntTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntTaskClient) DeleteOne(et *EntTask) *EntTaskDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntTaskClient) DeleteOneID(id int) *EntTaskDeleteOne {
	builder := c.Delete().Where(enttask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntTaskDeleteOne{builder}
}

// Query returns a query builder for EntTask.
func (c *EntTaskClient) Query() *EntTaskQuery {
	return &EntTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntTask},
		inters: c.Interceptors(),
	}
}

// Get returns a EntTask entity by its id.
func (c *EntTaskClient) Get(ctx context.Context, id int) (*EntTask, error) {
	return c.Query().Where(enttask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntTaskClient) GetX(ctx context.Context, id int) *EntTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntTaskClient) Hooks() []Hook {
	return c.hooks.EntTask
}

// Interceptors returns the client interceptors.
func (c *EntTaskClient) Interceptors() []Interceptor {
	return c.inters.EntTask
}

func (c *EntTaskClient) mutate(ctx context.Context, m *EntTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntTask mutation op: %q", m.Op())
	}
}

// EntTaskHandlerClient is a client for the EntTaskHandler schema.
type EntTaskHandlerClient struct {
	config
}

// NewEntTaskHandlerClient returns a client for the EntTaskHandler from the given config.
func NewEntTaskHandlerClient(c config) *EntTaskHandlerClient {
	return &EntTaskHandlerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enttaskhandler.Hooks(f(g(h())))`.
func (c *EntTaskHandlerClient) Use(hooks ...Hook) {
	c.hooks.EntTaskHandler = append(c.hooks.EntTaskHandler, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enttaskhandler.Intercept(f(g(h())))`.
func (c *EntTaskHandlerClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntTaskHandler = append(c.inters.EntTaskHandler, interceptors...)
}

// Create returns a builder for creating a EntTaskHandler entity.
func (c *EntTaskHandlerClient) Create() *EntTaskHandlerCreate {
	mutation := newEntTaskHandlerMutation(c.config, OpCreate)
	return &EntTaskHandlerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntTaskHandler entities.
func (c *EntTaskHandlerClient) CreateBulk(builders ...*EntTaskHandlerCreate) *EntTaskHandlerCreateBulk {
	return &EntTaskHandlerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntTaskHandlerClient) MapCreateBulk(slice any, setFunc func(*EntTaskHandlerCreate, int)) *EntTaskHandlerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntTaskHandlerCreateBulk{err: fmt.Errorf("calling to EntTaskHandlerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntTaskHandlerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntTaskHandlerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntTaskHandler.
func (c *EntTaskHandlerClient) Update() *EntTaskHandlerUpdate {
	mutation := newEntTaskHandlerMutation(c.config, OpUpdate)
	return &EntTaskHandlerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntTaskHandlerClient) UpdateOne(eth *EntTaskHandler) *EntTaskHandlerUpdateOne {
	mutation := newEntTaskHandlerMutation(c.config, OpUpdateOne, withEntTaskHandler(eth))
	return &EntTaskHandlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntTaskHandlerClient) UpdateOneID(id int) *EntTaskHandlerUpdateOne {
	mutation := newEntTaskHandlerMutation(c.config, OpUpdateOne, withEntTaskHandlerID(id))
	return &EntTaskHandlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntTaskHandler.
func (c *EntTaskHandlerClient) Delete() *EntTaskHandlerDelete {
	mutation := newEntTaskHandlerMutation(c.config, OpDelete)
	return &EntTaskHandlerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntTaskHandlerClient) DeleteOne(eth *EntTaskHandler) *EntTaskHandlerDeleteOne {
	return c.DeleteOneID(eth.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntTaskHandlerClient) DeleteOneID(id int) *EntTaskHandlerDeleteOne {
	builder := c.Delete().Where(enttaskhandler.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntTaskHandlerDeleteOne{builder}
}

// Query returns a query builder for EntTaskHandler.
func (c *EntTaskHandlerClient) Query() *EntTaskHandlerQuery {
	return &EntTaskHandlerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntTaskHandler},
		inters: c.Interceptors(),
	}
}

// Get returns a EntTaskHandler entity by its id.
func (c *EntTaskHandlerClient) Get(ctx context.Context, id int) (*EntTaskHandler, error) {
	return c.Query().Where(enttaskhandler.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntTaskHandlerClient) GetX(ctx context.Context, id int) *EntTaskHandler {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntTaskHandlerClient) Hooks() []Hook {
	return c.hooks.EntTaskHandler
}

// Interceptors returns the client interceptors.
func (c *EntTaskHandlerClient) Interceptors() []Interceptor {
	return c.inters.EntTaskHandler
}

func (c *EntTaskHandlerClient) mutate(ctx context.Context, m *EntTaskHandlerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntTaskHandlerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntTaskHandlerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntTaskHandlerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntTaskHandlerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntTaskHandler mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EntTask, EntTaskHandler []ent.Hook
	}
	inters struct {
		EntTask, EntTaskHandler []ent.Interceptor
	}
)
