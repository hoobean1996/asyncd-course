// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"fs.io/asyncd/ent/enttaskhandler"
	"fs.io/asyncd/ent/predicate"
)

// EntTaskHandlerDelete is the builder for deleting a EntTaskHandler entity.
type EntTaskHandlerDelete struct {
	config
	hooks    []Hook
	mutation *EntTaskHandlerMutation
}

// Where appends a list predicates to the EntTaskHandlerDelete builder.
func (ethd *EntTaskHandlerDelete) Where(ps ...predicate.EntTaskHandler) *EntTaskHandlerDelete {
	ethd.mutation.Where(ps...)
	return ethd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ethd *EntTaskHandlerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ethd.sqlExec, ethd.mutation, ethd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ethd *EntTaskHandlerDelete) ExecX(ctx context.Context) int {
	n, err := ethd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ethd *EntTaskHandlerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(enttaskhandler.Table, sqlgraph.NewFieldSpec(enttaskhandler.FieldID, field.TypeInt))
	if ps := ethd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ethd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ethd.mutation.done = true
	return affected, err
}

// EntTaskHandlerDeleteOne is the builder for deleting a single EntTaskHandler entity.
type EntTaskHandlerDeleteOne struct {
	ethd *EntTaskHandlerDelete
}

// Where appends a list predicates to the EntTaskHandlerDelete builder.
func (ethdo *EntTaskHandlerDeleteOne) Where(ps ...predicate.EntTaskHandler) *EntTaskHandlerDeleteOne {
	ethdo.ethd.mutation.Where(ps...)
	return ethdo
}

// Exec executes the deletion query.
func (ethdo *EntTaskHandlerDeleteOne) Exec(ctx context.Context) error {
	n, err := ethdo.ethd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{enttaskhandler.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ethdo *EntTaskHandlerDeleteOne) ExecX(ctx context.Context) {
	if err := ethdo.Exec(ctx); err != nil {
		panic(err)
	}
}
