// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"fs.io/asyncd/ent/enttaskhandler"
)

// EntTaskHandler is the model entity for the EntTaskHandler schema.
type EntTaskHandler struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// handler name
	Name string `json:"name,omitempty"`
	// handler's signature, E.g: (int) -> int
	Signature string `json:"signature,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntTaskHandler) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enttaskhandler.FieldID:
			values[i] = new(sql.NullInt64)
		case enttaskhandler.FieldName, enttaskhandler.FieldSignature:
			values[i] = new(sql.NullString)
		case enttaskhandler.FieldCreatedAt, enttaskhandler.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntTaskHandler fields.
func (eth *EntTaskHandler) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enttaskhandler.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eth.ID = int(value.Int64)
		case enttaskhandler.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				eth.Name = value.String
			}
		case enttaskhandler.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				eth.Signature = value.String
			}
		case enttaskhandler.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eth.CreatedAt = value.Time
			}
		case enttaskhandler.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eth.UpdatedAt = value.Time
			}
		default:
			eth.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntTaskHandler.
// This includes values selected through modifiers, order, etc.
func (eth *EntTaskHandler) Value(name string) (ent.Value, error) {
	return eth.selectValues.Get(name)
}

// Update returns a builder for updating this EntTaskHandler.
// Note that you need to call EntTaskHandler.Unwrap() before calling this method if this EntTaskHandler
// was returned from a transaction, and the transaction was committed or rolled back.
func (eth *EntTaskHandler) Update() *EntTaskHandlerUpdateOne {
	return NewEntTaskHandlerClient(eth.config).UpdateOne(eth)
}

// Unwrap unwraps the EntTaskHandler entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eth *EntTaskHandler) Unwrap() *EntTaskHandler {
	_tx, ok := eth.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntTaskHandler is not a transactional entity")
	}
	eth.config.driver = _tx.drv
	return eth
}

// String implements the fmt.Stringer.
func (eth *EntTaskHandler) String() string {
	var builder strings.Builder
	builder.WriteString("EntTaskHandler(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eth.ID))
	builder.WriteString("name=")
	builder.WriteString(eth.Name)
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(eth.Signature)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eth.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eth.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EntTaskHandlers is a parsable slice of EntTaskHandler.
type EntTaskHandlers []*EntTaskHandler
