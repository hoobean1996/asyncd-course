package asyncd

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"fs.io/asyncd/ent"
)

// CreateEntTask is the resolver for the createEntTask field.
func (r *mutationResolver) CreateEntTask(ctx context.Context, input ent.CreateEntTaskInput) (*ent.EntTask, error) {
	return r.client.EntTask.Create().SetInput(input).Save(ctx)
}

// UpdateEntTask is the resolver for the updateEntTask field.
func (r *mutationResolver) UpdateEntTask(ctx context.Context, id int, input ent.UpdateEntTaskInput) (*ent.EntTask, error) {
	return r.client.EntTask.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteEntTask is the resolver for the deleteEntTask field.
func (r *mutationResolver) DeleteEntTask(ctx context.Context, id int) (*ent.EntTask, error) {
	task := r.client.EntTask.GetX(ctx, id)
	err := r.client.EntTask.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return nil, err
	}
	return task, nil
}

// CreateEntTaskHandler is the resolver for the createEntTaskHandler field.
func (r *mutationResolver) CreateEntTaskHandler(ctx context.Context, input ent.CreateEntTaskHandlerInput) (*ent.EntTaskHandler, error) {
	panic(fmt.Errorf("not implemented: CreateEntTaskHandler - createEntTaskHandler"))
}

// UpdateEntTaskHandler is the resolver for the updateEntTaskHandler field.
func (r *mutationResolver) UpdateEntTaskHandler(ctx context.Context, id int, input ent.UpdateEntTaskHandlerInput) (*ent.EntTaskHandler, error) {
	panic(fmt.Errorf("not implemented: UpdateEntTaskHandler - updateEntTaskHandler"))
}

// DeleteEntTaskHandler is the resolver for the deleteEntTaskHandler field.
func (r *mutationResolver) DeleteEntTaskHandler(ctx context.Context, id int) (*ent.EntTaskHandler, error) {
	panic(fmt.Errorf("not implemented: DeleteEntTaskHandler - deleteEntTaskHandler"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
